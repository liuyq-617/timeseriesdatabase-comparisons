// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package mongo_serialization

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Field struct {
	_tab flatbuffers.Table
}

func GetRootAsField(buf []byte, offset flatbuffers.UOffsetT) *Field {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Field{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Field) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Field) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Field) Key(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Field) KeyLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Field) KeyBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Field) ValueType() ValueType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Field) MutateValueType(n ValueType) bool {
	return rcv._tab.MutateInt8Slot(6, n)
}

func (rcv *Field) IntValue() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Field) MutateIntValue(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *Field) LongValue() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Field) MutateLongValue(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *Field) FloatValue() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Field) MutateFloatValue(n float32) bool {
	return rcv._tab.MutateFloat32Slot(12, n)
}

func (rcv *Field) DoubleValue() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Field) MutateDoubleValue(n float64) bool {
	return rcv._tab.MutateFloat64Slot(14, n)
}

func (rcv *Field) StringValue(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Field) StringValueLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Field) StringValueBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func FieldStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func FieldAddKey(builder *flatbuffers.Builder, key flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(key), 0)
}
func FieldStartKeyVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func FieldAddValueType(builder *flatbuffers.Builder, valueType int8) {
	builder.PrependInt8Slot(1, valueType, 0)
}
func FieldAddIntValue(builder *flatbuffers.Builder, intValue int32) {
	builder.PrependInt32Slot(2, intValue, 0)
}
func FieldAddLongValue(builder *flatbuffers.Builder, longValue int64) {
	builder.PrependInt64Slot(3, longValue, 0)
}
func FieldAddFloatValue(builder *flatbuffers.Builder, floatValue float32) {
	builder.PrependFloat32Slot(4, floatValue, 0.0)
}
func FieldAddDoubleValue(builder *flatbuffers.Builder, doubleValue float64) {
	builder.PrependFloat64Slot(5, doubleValue, 0.0)
}
func FieldAddStringValue(builder *flatbuffers.Builder, stringValue flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(stringValue), 0)
}
func FieldStartStringValueVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func FieldEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
